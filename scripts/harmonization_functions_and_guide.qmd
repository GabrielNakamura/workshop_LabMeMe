---
title: "Harmonization functions and guide"
author: "Thaís Gomes Piazza Faria"
format: 
  html:
    output: false
editor: source
---

## Info

This is a script with functions and a step-by-step guide to match and combine the accepted taxonomic names of any 2 databases. It requires the packages `dplyr`, `tidyr`, `stringr` and `fuzzyjoin` , as well as two data frames containing a list of names to be combined. It was planned to be used with names ranking up to genus (genus, subgenus, species and subspecies), and all names should, ideally, belong to the same rank. Also, the names should be clean and formatted beforehand to ensure the best results, for the matching process is done considering both identical matches and slight variations in spelling between the databases. For more information on what the clean names should look like, see the `separate_name_parts` section.

For the step-by-step guide, the fossil occurrence databases PBDB and NOW will be used. Note that this guide does not involve the use of taxonomic synonyms (yet), only the accepted names according to each database.

## Loading data and packages

```{r}
# Using the package `groundhog` to control package versions. The package `tidylog` is optional and provides useful information on the results of the matching operations.

#library(groundhog)
#groundhog.day <- "2025-05-01"
#groundhog.packages <- c("here",
#                        "dplyr",
#                        "stringr",
#                        "fuzzyjoin",
#                        "tidylog")

#groundhog.library(groundhog.packages,
#                  groundhog.day)
#rm(groundhog.day,
#   groundhog.packages)

library(here)
library(dplyr)
library(tidytable)
library(stringr)
library(fuzzyjoin)
library(tidylog)

# Loading clean data and selecting needed columns

nowOccNames <- read.csv(here("data",
                             "processed",
                             "now_occs_species-names_2025-05-06.csv")) %>%
  select(now_accepted_name,
         now_accepted_rank) %>%
  distinct()

pbdbOccNames <- read.csv(here("data",
                              "processed",
                              "pbdb_occs_species-names_2025-05-06.csv")) %>%
  select(pbdb_accepted_name,
         pbdb_internal_synonym,
         pbdb_accepted_rank) %>%
  distinct()

pbdbTaxNames <- read.csv(here("data",
                              "processed",
                              "pbdb_taxa_species-names_2025-04-03.csv")) %>%
  select(family, 
         taxon_name,
         accepted_name) %>%
  distinct() #Por que tinha 8 linhas repetidas aqui?

mddTaxNames <- read.csv(here("data", 
                             "processed", 
                             "mdd_taxa_species-names_v2.1.csv"))

```

## Support Functions

### separate_name_parts

This function splits a species name into 4 possible parts: genus, subgenus, species epithet and subspecies epithet, each on its own column. It requires the packages `dplyr` and `tidyr`. It's arguments are:

-   `data` = Your occurrence data frame.
-   `accepted_name_col` = A string. The name of the column with the occurrences' accepted name.
-   `base_suffix` = A string. The suffix to be added to the new columns' names indicating the base the names come from. It's useful in case you want to find name matches between different bases.
-   `delim` = A string. The separator used to separate each part of the name, like a simple space `" "`, or symbols like `"_"`.

**Requirements for correct results:**

The function accepts names with the following formats:

-   `Genus`
-   `Genus (Subgenus)`
-   `Genus (Subgenus) species`
-   `Genus (Subgenus) species subspecies`
-   `Genus species`
-   `Genus species subspecies`

Which means that each line must have a single name and no resolution markers or comments. In case there is a subgenus portion, it must be enclosed in parenthesis. Here are some bad examples:

-   `Homo sapiens cf. sapiens`
-   `Homo sapiens/Homo neanderthalensis`
-   `Homo sp. (large)`
-   `Daphoenodon Borocyon robustum`

```{r}
separate_name_parts <- function(data,
                                name_col,
                                base_suffix,
                                delim) {
  
  #Separate genus part from the rest
  dtf <- data %>%
    separate_wider_delim(cols = name_col,
                         delim = delim,
                         names = c("suffix_genus", "suffix_other"),
                         too_many = "merge",
                         too_few = "align_start",
                         cols_remove = FALSE)
  
  #Separate subgenus part from the rest and clean markers
  dtf <- dtf %>%
    separate_wider_delim(cols = "suffix_other",
                         delim = ")",
                         names = c("suffix_subgenus", "suffix_other"),
                         too_few = "align_end") %>%
    mutate(suffix_subgenus = str_replace_all(suffix_subgenus,
                                             pattern = "\\(",
                                             replacement = ""),
           suffix_other = str_replace(suffix_other,
                                      pattern = paste0("^", delim),
                                      replacement = ""))
  
  #Separate species and subspecies epithets
  dtf <- dtf %>%
    separate_wider_delim(cols = "suffix_other",
                         delim = delim,
                         names = c("suffix_speciesEpiteth",
                                   "suffix_subspeciesEpiteth"),
                         too_few = "align_start")
  
  colnames(dtf) <- str_replace_all(colnames(dtf), 
                                   pattern = "suffix", 
                                   replacement = base_suffix)
  
  return(dtf)
}
```

### delete_subgenus & swap_subgenus

```{r}
delete_subgenus <- function(data,
                            name_col,
                            delim) {
  
  dtf <- data %>%
    filter(str_detect(eval(parse(text = name_col)), pattern = "\\(")) %>%
    mutate(col_copy = eval(parse(text = name_col)),
           col_copy = str_replace_all(col_copy, 
                                      pattern = paste0(delim, 
                                                       "\\(.*\\)"),
                                      replacement = ""))
  colnames(dtf) <- str_replace(colnames(dtf), 
                               pattern = "col_copy", 
                               replacement = paste0(name_col, "_delSubgen"))
  if (nrow(dtf) == 0) {
    warning("No taxonomic names containing a subgenus portion enclosed in parentheses found, returning an empty dataframe")
  }
  
  return(dtf)
}

#pbdbOccNames_del_subgen <- delete_subgenus(pbdbOccNames, 
#                         name_col = "pbdb_accepted_name",
#                         delim = "_")
```

```{r}
swap_subgenus <- function(data,
                          name_col,
                          delim) {
  
  
  dtf <- data %>%
    filter(str_detect(eval(parse(text = name_col)), pattern = "\\(")) 
  
  dtf <- dtf %>%
    mutate(col_copy = eval(parse(text = name_col)),
           col_copy = str_replace_all(col_copy,
                                      c(".*\\(" = "", 
                                        "\\)" = "")))
  
  colnames(dtf) <- str_replace(colnames(dtf), 
                               pattern = "col_copy", 
                               replacement = paste0(name_col, "_swapSubgen"))
  
  if (nrow(dtf) == 0) {
    warning("No taxonomic names containing a subgenus portion enclosed in parentheses found, returning an empty dataframe")
  }
  return(dtf)
}

#pbdbOccNames_swap_subgen <- swap_subgenus(pbdbOccNames, 
#                         name_col = "pbdb_accepted_name",
#                         delim = "_")
```

### harmonize_exact_match

Escrever explicação aqui

```{r}
harmonize_exact_match <- function(base1_dtf,
                                  base2_dtf,
                                  base1_suffix,
                                  base2_suffix,
                                  base1_col,
                                  base2_col) {
  
  #Preparing needed objects to use the name columns on the functions full_join() and select()
  by_cols <- base2_col
  names(by_cols) <- base1_col
  
  select_cols <- c(base1_col, base2_col)
  
  #Performing exact match of names between the 2 bases, creating flag columns and filtering table for distinct rows
  match_exact <- full_join(base1_dtf, base2_dtf,
                           by = by_cols,
                           keep = TRUE) %>%
    mutate(base1_present = !is.na(eval(parse(text = base1_col))),
           base2_present = !is.na(eval(parse(text = base2_col)))) %>%
    distinct()
  
  # Filtering identical names matched between bases, creating the information columns "string_distance" for the number of different characters between matched names, which is 0 for exact matches, and "match_notes" for a quick comment on what's happening with each combination, which again is an exact match. Finally, selecting the entered name columns and the information columns.
  
  exact1_found <- match_exact  %>%
    filter(base1_present == TRUE & base2_present == TRUE) %>%
    mutate(string_distance = 0,
           match_notes = "exact match") %>%
    select(all_of(select_cols),
           string_distance,
           match_notes)
  
  #Filtering the names on each base that did not find an exact match on the other
  #base. These names can be parsed to other functions matching functions
  base1_failed_match <- match_exact %>%
    filter(base2_present == FALSE) %>%
    select(any_of(colnames(base1_dtf)))
  
  base2_failed_match <- match_exact %>%
    filter(base1_present == FALSE) %>%
    select(any_of(colnames(base2_dtf)))
  
  #Creating a base summary of matched and unmatched names from each base
  summ1 <- match_exact[[base1_col]] %>%
    na.omit() %>%
    unique() %>%
    length()
  
  summ2 <- match_exact[[base2_col]] %>%
    na.omit() %>%
    unique() %>%
    length()
  
  summ3 <- match_exact %>%
    filter(base1_present == TRUE & base2_present == TRUE) %>%
    nrow()
  
  summ_table <- data.frame(base1_count = c(summ1, summ3, NA),
                           base1_proportion = c(NA, NA, NA),
                           base2_count = c(summ2, summ3, NA),
                           base2_proportion = c(NA, NA, NA))
  summ_table[3,] <- summ_table[1,] - summ_table[2,]
  summ_table[2] <- summ_table[1]/summ1
  summ_table[4] <- summ_table[3]/summ2
  
  colnames(summ_table) <- str_replace_all(colnames(summ_table),
                                          c("base1" = base1_suffix,
                                            "base2" = base2_suffix))
  
  row.names(summ_table) <- c("unique_names",
                             "matched_names",
                             "unmatched_names")
  
  #Saving the results on a list and renaming the dataframes with failed matches
  #with their appropriate suffixes
  result <- list(exact_summary = summ_table,
                 exact_found = exact1_found,
                 base1_exact_failed = base1_failed_match,
                 base2_exact_failed = base2_failed_match)
  
  names(result) <- str_replace_all(names(result),
                                   c("base1" = base1_suffix,
                                     "base2" = base2_suffix))
  
  return(result)
  
  #adicionar parte de checar se o sufixo já vem no nome das colunas de nomes ou se precisa colocar
  #adicionar a possibilidade de incluir nome de autor ou outras colunas que a pessoa quiser na tabela de exact matches
}

#exact1 <- harmonize_exact_match(base1_dtf = pbdbOccNames,
#                                     base2_dtf = nowOccNames,
#                                     base1_suffix = "pbdb",
#                                     base2_suffix = "now",
#                                     base1_col = "pbdb_accepted_name",
#                                     base2_col = "now_accepted_name")
```

### harmonize_fuzzy_match

This function matches names from two databases based on a chosen number of different characters between the names, called `string_distance`, meaning that a `string_distance == 0` corresponds to two identical names, and a `string_distance == 2` corresponds to two names with a total of 2 different characters between them. It requires the packages `dplyr`, `stringr` and `fuzzyjoin`. It's arguments are:

-   `base1_dtf` = A data frame with names from your first database.
-   `base2_dtf` = A data frame with names from your second database.
-   `base1_suffix` = A string. A suffix to be added to column names coming from the first database
-   `base2_suffix` = A string. A suffix to be added to column names coming from the second database
-   `base1_col` = A string. The name of the column containing the taxonomic names from the first database.
-   `base2_col` = A string. The name of the column containing the taxonomic names from the second database.
-   `min_dist` = The minimum string distance to be used when matching names. The minimum possible distance is 0, which means the names are identical. However, it is recommended to use the function `harmonize_exact_match` when trying to find identical names instead, for it's more efficient and returns summary statistics of identical matches, as well as a list of names that failed the exact match test.
-   `max_dist` = The maximum string distance to be used when matching names. Our experiences suggest that maximum of 2 is still likely to return correct matches, while a maximum of 5 is too much.
-   `delim` = The character used to separate the taxonomic names' parts, like a space `" "` or a symbol `"_"`.

```{r}
harmonize_fuzzy_match <- function(base1_dtf,
                                  base2_dtf,
                                  base1_suffix,
                                  base2_suffix,
                                  base1_col,
                                  base2_col,
                                  min_dist,
                                  max_dist,
                                  delim) {
  
  #Preparing needed objects to use the name columns on the functions full_join() and select()
  
  by_cols <- base2_col
  names(by_cols) <- base1_col
  
  select_cols <- c(base1_col, base2_col)
  
  base1_names <- base1_dtf[base1_col]
  base2_names <- base2_dtf[base2_col]
  
  #Performing fuzzy match of names between the 2 bases, creating flag columns and filtering table for distinct rows
  
  match_fuzzy <- stringdist_full_join(base1_names, base2_names,
                                      by = by_cols,
                                      distance_col = "string_distance",
                                      max_dist = max_dist) %>%
    mutate(base1_present = !is.na(eval(parse(text = base1_col))),
           base2_present = !is.na(eval(parse(text = base2_col)))) %>%
    distinct()
  
  #Filtering matches based on the min and max distance set on the arguments
  fuzzy_match_found <- match_fuzzy %>%
    filter(string_distance >= min_dist & string_distance <= max_dist) %>%
    select(-base1_present,
           -base2_present) 
  
  # Separating name parts to make informative notes
  fuzzy_match_found <- separate_name_parts(fuzzy_match_found, 
                                           name_col = base1_col,
                                           base_suffix = "base1", 
                                           delim = delim)
  
  fuzzy_match_found <- separate_name_parts(fuzzy_match_found, 
                                           name_col = base2_col,
                                           base_suffix = "base2", 
                                           delim = delim)
  
  #Using the different name parts to detect where are the differences between the matched names and create informative match notes. For instance, if the function `stringdist()` calculates a difference higher than 0 between the genera of the matched pair, the function `case_when()` will add the note "different spelling on genus" to the column `genus_dif`. If no difference is detected between the genera (= a difference of 0) than an `NA` is added the column `genus_dif`. The processes is repeated to the subgenus, species epithet and subspecies epithet of the matched pairs.
  
  fuzzy_match_found <- fuzzy_match_found %>%
    mutate(genus_dif = case_when(stringdist::stringdist(base1_genus, base2_genus) > 0 ~ "different spelling on genus"),
           subgenus_dif = case_when(stringdist::stringdist(base1_subgenus, base2_subgenus) > 0 ~ "different spelling on subgenus"),
           speciesEpi_dif = case_when(stringdist::stringdist(base1_speciesEpiteth, base2_speciesEpiteth) > 0 ~ "different spelling on species epiteth"),
           subspeciesEpi_dif = case_when(stringdist::stringdist(base1_subspeciesEpiteth, base2_subspeciesEpiteth) > 0 ~ "different spelling on subspecies epiteth"))
  
  #Gathering the notes into the `match_notes` column, cleaning NAs, selecting relevant columns for the results and adding notes to occasional 0 difference cases. 
  fuzzy_match_found <- fuzzy_match_found %>%
    mutate(match_notes = paste(genus_dif,
                               subgenus_dif,
                               speciesEpi_dif,
                               subspeciesEpi_dif,
                               sep = ","),
           match_notes = str_replace_all(match_notes,
                                         pattern = "NA,|,NA",
                                         replacement = "")) %>%
    select(all_of(select_cols), 
           string_distance, 
           match_notes) %>%
    mutate(match_notes = case_when(string_distance == 0 ~ "exact match",
                                   TRUE ~ match_notes))
  
  #Filtering names that did not find matches
  
  base1_dist_failed_match <- match_fuzzy %>%
    filter(base2_present == FALSE) %>%
    select(any_of(colnames(base1_dtf))) %>%
    left_join(base1_dtf, by = base1_col)
  
  base2_dist_failed_match <- match_fuzzy %>%
    filter(base1_present == FALSE) %>%
    select(any_of(colnames(base2_dtf))) %>%
    left_join(base2_dtf, by = base2_col)
  
  #Saving the results on a list and renaming the dataframes with failed matches with their appropriate suffixes
  result <- list(dist_match_found = fuzzy_match_found,
                 base1_dist_match_failed = base1_dist_failed_match,
                 base2_dist_match_failed = base2_dist_failed_match)
  
  names(result) <- str_replace_all(names(result),
                                   c("base1" = base1_suffix,
                                     "base2" = base2_suffix))
  
  names(result) <- str_replace_all(names(result), 
                                   pattern = "dist", 
                                   replacement = paste0("min", 
                                                        min_dist, 
                                                        "max", 
                                                        max_dist))
  
  return(result)
  
  #Adicionar a possibilidade de colocar mais colunas no resultado final
  #Fazer alguma coisa com estatísticas descritivas
}

#fuzzy_match <- harmonize_fuzzy_match(base1_dtf = pbdbOccNames,
#                                     base2_dtf = nowOccNames,
#                                     base1_suffix = "pbdb",
#                                     base2_suffix = "now",
#                                     base1_col = "pbdb_accepted_name",
#                                     base2_col = "now_accepted_name",
#                                     min_dist = 1,
#                                     max_dist = 2,
#                                     delim = "_")
```

### add_to_synonymy

Escrever alguma coisa sobre essa função não servir pra começar uma sinonímia, e que você precisa de uma coluna de flags (aqui chamada de accepted_match) pra quais pares você quer adicionar 
```{r}
add_to_synonymy <- function(synonymy_dtf,
                            eval_dtf){

  dtf <- distinct(bind_rows(synonymy_dtf, select(filter(eval_dtf, accepted_match == TRUE), -accepted_match)))
  
  return(dtf)
}
```

## Step-by-step Guide

### Part 1 - Valid names

#### Exact matches

```{r}
exact.1 <- harmonize_exact_match(base1_dtf = pbdbOccNames,
                                 base2_dtf = nowOccNames,
                                 base1_suffix = "pbdb",
                                 base2_suffix = "now",
                                 base1_col = "pbdb_accepted_name",
                                 base2_col = "now_accepted_name")

exact.1$exact_summary
```

```{r}
finalSynonymy.1 <- exact.1$exact_found
```

#### Fuzzy matches

##### Using failed matches iteratively

String distance of 1 character

```{r}
fuzzy.1a.min1max1 <- harmonize_fuzzy_match(base1_dtf = exact.1$pbdb_exact_failed,
                                          base2_dtf = exact.1$now_exact_failed,
                                          base1_suffix = "pbdb",
                                          base2_suffix = "now",
                                          base1_col = "pbdb_accepted_name",
                                          base2_col = "now_accepted_name",
                                          min_dist = 1,
                                          max_dist = 1,
                                          delim = "_")
```

Evaluating correct matches

```{r}
fuzzy.1a.min1max1.eval <- fuzzy.1a.min1max1$min1max1_match_found %>%
  mutate(accepted_match = case_when(
    pbdb_accepted_name == "Cyon_antiquus" ~ FALSE, 
    TRUE ~ TRUE
  ))
```

Adding correct matches to synonymy

```{r}
finalSynonymy.1 <- add_to_synonymy(finalSynonymy.1, fuzzy.1a.min1max1.eval)
```

```{r}
rm(exact.1)
```

String difference of 2 characters

```{r}
fuzzy.1a.min2max2 <- harmonize_fuzzy_match(base1_dtf = fuzzy.1a.min1max1$pbdb_min1max1_match_failed,
                                          base2_dtf = fuzzy.1a.min1max1$now_min1max1_match_failed,
                                          base1_suffix = "pbdb",
                                          base2_suffix = "now",
                                          base1_col = "pbdb_accepted_name",
                                          base2_col = "now_accepted_name",
                                          min_dist = 2,
                                          max_dist = 2,
                                          delim = "_")
```

Evaluating correct matches

```{r}
fuzzy.1a.min2max2.eval <- fuzzy.1a.min2max2$min2max2_match_found %>%
  mutate(accepted_match = TRUE)
```

Adding correct matches to synonymy

```{r}
finalSynonymy.1 <- add_to_synonymy(finalSynonymy.1, fuzzy.1a.min2max2.eval)
```

```{r}
rm(fuzzy.1a.min1max1)
```

String distance of 3 characters

```{r}
fuzzy.1a.min3max3 <- harmonize_fuzzy_match(base1_dtf = fuzzy.1a.min2max2$pbdb_min2max2_match_failed,
                                     base2_dtf = fuzzy.1a.min2max2$now_min2max2_match_failed,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_accepted_name",
                                     base2_col = "now_accepted_name",
                                     min_dist = 3,
                                     max_dist = 3,
                                     delim = "_")
```

Evaluating correct matches

```{r}
fuzzy.1a.min3max3.eval <- fuzzy.1a.min3max3$min3max3_match_found %>%
  mutate(accepted_match = FALSE)
```

Adding correct matches to synonymy

```{r}
finalSynonymy.1 <- add_to_synonymy(finalSynonymy.1, fuzzy.1a.min3max3.eval)
```

```{r}
rm(fuzzy.1a.min2max2)
```

String distance of 4 characters

```{r}
fuzzy.1a.min4max4 <- harmonize_fuzzy_match(base1_dtf = fuzzy.1a.min3max3$pbdb_min3max3_match_failed,
                                     base2_dtf = fuzzy.1a.min3max3$now_min3max3_match_failed,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_accepted_name",
                                     base2_col = "now_accepted_name",
                                     min_dist = 4,
                                     max_dist = 4,
                                     delim = "_")
```

Evaluating correct matches

```{r}
fuzzy.1a.min4max4.eval <- fuzzy.1a.min4max4$min4max4_match_found %>%
  mutate(accepted_match = FALSE)
```

Adding correct matches to synonymy

```{r}
finalSynonymy.1 <- add_to_synonymy(finalSynonymy.1, fuzzy.1a.min4max4.eval)
```

```{r}
rm(fuzzy.1a.min3max3, 
   fuzzy.1a.min4max4)
```

As a final step, we can gather all pair evaluations done so far

```{r}
fuzzy.1a.eval <- bind_rows(fuzzy.1a.min1max1.eval,
                          fuzzy.1a.min2max2.eval,
                          fuzzy.1a.min3max3.eval,
                          fuzzy.1a.min4max4.eval)
```

```{r}
rm(fuzzy.1a.min1max1.eval,
                          fuzzy.1a.min2max2.eval,
                          fuzzy.1a.min3max3.eval,
                          fuzzy.1a.min4max4.eval)
```


##### Using the full list of names at once

String difference of 1 to 4

```{r}
fuzzy.1b.min1max4 <- harmonize_fuzzy_match(base1_dtf = pbdbOccNames,
                                          base2_dtf = nowOccNames,
                                          base1_suffix = "pbdb",
                                          base2_suffix = "now",
                                          base1_col = "pbdb_accepted_name",
                                          base2_col = "now_accepted_name",
                                          min_dist = 1,
                                          max_dist = 4,
                                          delim = "_")
```

Adding previous match evaluations to the new list

```{r}
fuzzy.1b.min1max4.eval <- left_join(fuzzy.1b.min1max4$min1max4_match_found,
                                   fuzzy.1a.eval)
```

Evaluating correct matches

```{r}
fuzzy.1b.min1max4.eval <- fuzzy.1b.min1max4.eval %>%
  mutate(accepted_match = case_when(
      pbdb_accepted_name == "Palaeogale_minuta" & now_accepted_name == "Palaeogale_minutus" | 
      pbdb_accepted_name == "Plionictis_oaxacaensis" & now_accepted_name == "Plionictis_oaxaquenis" ~ TRUE,
      #pbdb_accepted_name == "Cyon_antiquus" & now_accepted_name == "Cuon_antiquus" |
      #pbdb_accepted_name == "Vulpes_vulgaris" & now_accepted_name == "Vulpes_vulpes" |
      #pbdb_accepted_name == "Subparictis_dakotensis" & now_accepted_name == "Parictis_dakotensis" |
      #pbdb_accepted_name == "Dinocrocuta_algeriensis" & now_accepted_name == "Percrocuta_algeriensis" |
      #pbdb_accepted_name == "Phoca_hispida" & now_accepted_name == "Pusa_hispida"
      is.na(accepted_match) ~ FALSE,
      TRUE ~ accepted_match))
```

Adding correct matches to synonymy

```{r}
finalSynonymy.1 <- add_to_synonymy(finalSynonymy.1, fuzzy.1b.min1max4.eval)
```

Gathering all pair evaluations for this part

```{r}
fuzzy.1.eval <- bind_rows(fuzzy.1a.eval, fuzzy.1b.min1max4.eval)
```

```{r}
rm(fuzzy.1b.min1max4, 
   fuzzy.1b.min1max4.eval, 
   fuzzy.1a.eval)
```

#### Specific step

##### Checking alternative PBDB genus combination

```{r}
pbdb_different_names <- pbdbOccNames %>%
  select(pbdb_accepted_name,
         pbdb_internal_synonym) %>%
  distinct() %>%
  filter(pbdb_accepted_name != pbdb_internal_synonym)
```

```{r}
exact11 <- harmonize_exact_match(base1_dtf = pbdb_different_names,
                                     base2_dtf = nowOccNames,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_internal_synonym",
                                     base2_col = "now_accepted_name")
```

```{r}
exact11 <- exact11$exact1_found %>%
  filter(pbdb_internal_synonym %in% pbdb_different_names$pbdb_internal_synonym) %>%
  left_join(pbdbOccNames[c("pbdb_accepted_name", 
                         "pbdb_internal_synonym")])
```

```{r}
final_synonymy <- left_join(final_synonymy, 
                            pbdbOccNames[c("pbdb_accepted_name",
                                        "pbdb_internal_synonym")]) %>%
  distinct() %>%
  bind_rows(exact11)

```

```{r}
rm(exact11)
```

```{r}
fuzzy_match3_min1max4 <- harmonize_fuzzy_match(base1_dtf = pbdb_different_names,
                                     base2_dtf = nowOccNames,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_internal_synonym",
                                     base2_col = "now_accepted_name",
                                     min_dist = 1,
                                     max_dist = 4,
                                     delim = "_")
```

```{r}
fuzzy_match3_min1max4_eval <- fuzzy_match3_min1max4$min1max4_match_found %>%
  left_join(pbdbOccNames[c("pbdb_accepted_name", 
                        "pbdb_internal_synonym")]) %>% mutate(accepted_match = FALSE)
```

```{r}
final_synonymy <- final_synonymy %>%
  bind_rows(select(filter(fuzzy_match3_min1max4_eval, 
              accepted_match == TRUE),
       -accepted_match))
```

```{r}
rm(fuzzy_match3_min1max4, 
   fuzzy_match3_min1max4_eval, 
   pbdb_different_names)
```

##### Checking possible matches when deleting or swapping subgenus

```{r}
subgenus_names <- pbdbOccNames %>%
  filter(str_detect(pbdb_accepted_name, pattern = "\\(") |
         str_detect(pbdb_internal_synonym, pattern = "\\(")) 

subgenus_alternatives1 <- subgenus_names %>%
  swap_subgenus(name_col = "pbdb_accepted_name",
                delim = "_") %>%
  right_join(.,subgenus_names) %>%
  delete_subgenus(name_col = "pbdb_accepted_name",
                delim = "_")

subgenus_alternatives2 <- subgenus_names %>%
  swap_subgenus(name_col = "pbdb_internal_synonym",
                  delim = "_") %>%
  right_join(., subgenus_names) %>%
  delete_subgenus(name_col = "pbdb_internal_synonym",
                  delim = "_") %>%
  right_join(., subgenus_names)
```

```{r}
exact12 <- harmonize_exact_match(base1_dtf = subgenus_alternatives1,
                                     base2_dtf = nowOccNames,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_accepted_name_swapSubgen",
                                     base2_col = "now_accepted_name")

exact13 <- harmonize_exact_match(base1_dtf = subgenus_alternatives1,
                                     base2_dtf = nowOccNames,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_accepted_name_delSubgen",
                                     base2_col = "now_accepted_name")

exact14 <- harmonize_exact_match(base1_dtf = subgenus_alternatives2,
                                     base2_dtf = nowOccNames,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_internal_synonym_swapSubgen",
                                     base2_col = "now_accepted_name")

exact15 <- harmonize_exact_match(base1_dtf = subgenus_alternatives2,
                                     base2_dtf = nowOccNames,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_internal_synonym_delSubgen",
                                     base2_col = "now_accepted_name")
```

Aqui eu to indo direto sem marcar as coisas como true, tem que arrumar depois

```{r}
final_synonymy <- bind_rows(final_synonymy,
          select(left_join(exact12$exact1_found, 
                           subgenus_alternatives1), 
                 !contains("Subgen")),
          select(left_join(exact13$exact1_found, 
                           subgenus_alternatives1), 
                 !contains("Subgen")),
          select(left_join(exact14$exact1_found, 
                           subgenus_alternatives2), 
                 !contains("Subgen")),
          select(left_join(exact15$exact1_found, 
                           subgenus_alternatives2), 
                 !contains("Subgen"))) %>%
  distinct() %>%
  select(-pbdb_accepted_rank)

```

```{r}
rm(exact12, 
   exact13, 
   exact14, 
   exact15)
```

```{r}
fuzzy_match4_min1max4 <- harmonize_fuzzy_match(base1_dtf = subgenus_alternatives1,
                                     base2_dtf = nowOccNames,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_accepted_name_swapSubgen",
                                     base2_col = "now_accepted_name",
                                     min_dist = 1,
                                     max_dist = 4,
                                     delim = "_")

fuzzy_match5_min1max4 <- harmonize_fuzzy_match(base1_dtf = subgenus_alternatives1,
                                     base2_dtf = nowOccNames,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_accepted_name_delSubgen",
                                     base2_col = "now_accepted_name",
                                     min_dist = 1,
                                     max_dist = 4,
                                     delim = "_")

fuzzy_match6_min1max4 <- harmonize_fuzzy_match(base1_dtf = subgenus_alternatives2,
                                     base2_dtf = nowOccNames,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_internal_synonym_swapSubgen",
                                     base2_col = "now_accepted_name",
                                     min_dist = 1,
                                     max_dist = 4,
                                     delim = "_")

fuzzy_match7_min1max4 <- harmonize_fuzzy_match(base1_dtf = subgenus_alternatives2,
                                     base2_dtf = nowOccNames,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_internal_synonym_delSubgen",
                                     base2_col = "now_accepted_name",
                                     min_dist = 1,
                                     max_dist = 4,
                                     delim = "_")
```

Nenhum aqui parece válido

```{r}
bind_rows(select(left_join(fuzzy_match4_min1max4$min1max4_match_found, 
                           subgenus_alternatives1), 
                 !contains("Subgen")),
          select(left_join(fuzzy_match5_min1max4$min1max4_match_found, 
                           subgenus_alternatives1), 
                 !contains("Subgen")),
          select(left_join(fuzzy_match6_min1max4$min1max4_match_found, 
                           subgenus_alternatives2), 
                 !contains("Subgen")),
          select(left_join(fuzzy_match7_min1max4$min1max4_match_found, 
                           subgenus_alternatives2), 
                 !contains("Subgen"))) %>%
  distinct()
```

```{r}
rm(fuzzy_match4_min1max4, 
   fuzzy_match5_min1max4, 
   fuzzy_match6_min1max4, 
   fuzzy_match7_min1max4,
   subgenus_alternatives1, 
   subgenus_alternatives2, 
   subgenus_names)
```

foram 35 nomes do pbdb, q correspondem a 62 ocorrências de 2195 (2,8%), e 35 nomes do now, que correspondem a 35 ocorrências de 1371 (2,55%)

### Part 2 - Synonymy 1

Passar essa parte pra limpeza
```{r}
pbdbTaxNames <- pbdbTaxNames %>%
  mutate(across(everything(),
                ~ str_replace_all(., 
                                  pattern = " ",
                                  replacement = "_")))

colnames(pbdbTaxNames) <- paste0("pbdb_", colnames(pbdbTaxNames))
```

#### Exact matches

Explicar que dá pra começar tanto com os dados completos das duas bases de dados de novo, ou dá pra começar com o que sobrou das bases de dados. Como aqui a gente tá usando a própria sinonímia do PBDB, a gente só precisa dos nomes do NOW que não foram combinados ainda.

```{r}
nowOccNames.unmatched <- anti_join(nowOccNames, finalSynonymy.1)
```

```{r}
exact.2 <- harmonize_exact_match(base1_dtf = pbdbTaxNames,
                                 base2_dtf = nowOccNames.unmatched,
                                 base1_suffix = "pbdb",
                                 base2_suffix = "now",
                                 base1_col = "pbdb_taxon_name",
                                 base2_col = "now_accepted_name")
exact.2$exact_summary
```

```{r}
finalSynonymy.2 <- exact.2$exact_found
```

#### Fuzzy matches

##### Using failed matches iteratively

String distance of 1 character

```{r}
fuzzy.2a.min1max1 <- harmonize_fuzzy_match(base1_dtf = exact.2$pbdb_exact_failed,
                                          base2_dtf = exact.2$now_exact_failed,
                                          base1_suffix = "pbdb",
                                          base2_suffix = "now",
                                          base1_col = "pbdb_taxon_name",
                                          base2_col = "now_accepted_name",
                                          min_dist = 1,
                                          max_dist = 1,
                                          delim = "_")
```

Evaluating correct matches

```{r}
fuzzy.2a.min1max1.eval <- fuzzy.2a.min1max1$min1max1_match_found %>%
  mutate(accepted_match = TRUE)
```

Adding correct matches to synonymy

```{r}
finalSynonymy.2 <- add_to_synonymy(finalSynonymy.2, fuzzy.2a.min1max1.eval)
```

```{r}
rm(exact.2)
```

String difference of 2 characters

```{r}
fuzzy.2a.min2max2 <- harmonize_fuzzy_match(base1_dtf = fuzzy.2a.min1max1$pbdb_min1max1_match_failed,
                                     base2_dtf = fuzzy.2a.min1max1$now_min1max1_match_failed,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_taxon_name",
                                     base2_col = "now_accepted_name",
                                     min_dist = 2,
                                     max_dist = 2,
                                     delim = "_")
```

Evaluating correct matches

```{r}
fuzzy.2a.min2max2.eval <- fuzzy.2a.min2max2$min2max2_match_found %>%
  mutate(accepted_match = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE))
```

Adding correct matches to synonymy

```{r}
finalSynonymy.2 <- add_to_synonymy(finalSynonymy.2, fuzzy.2a.min2max2.eval)
```

```{r}
rm(fuzzy.2a.min1max1)
```

String distance of 3 characters

```{r}
fuzzy.2a.min3max3 <- harmonize_fuzzy_match(base1_dtf = fuzzy.2a.min2max2$pbdb_min2max2_match_failed,
                                     base2_dtf = fuzzy.2a.min2max2$now_min2max2_match_failed,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_taxon_name",
                                     base2_col = "now_accepted_name",
                                     min_dist = 3,
                                     max_dist = 3,
                                     delim = "_")
```

Evaluating correct matches

```{r}
fuzzy.2a.min3max3.eval <- fuzzy.2a.min3max3$min3max3_match_found %>%
  mutate(accepted_match = case_when(
    pbdb_taxon_name == "Galidictis_grandidiensis" & now_accepted_name == "Galidictis_grandidieri" ~ TRUE,
    TRUE ~ FALSE
  ))
```

Adding correct matches to synonymy

```{r}
finalSynonymy.2 <- add_to_synonymy(finalSynonymy.2, fuzzy.2a.min3max3.eval)
```

```{r}
rm(fuzzy.2a.min2max2)
```

String distance of 4 characters

```{r}
fuzzy.2a.min4max4 <- harmonize_fuzzy_match(base1_dtf = fuzzy.2a.min3max3$pbdb_min3max3_match_failed,
                                     base2_dtf = fuzzy.2a.min3max3$now_min3max3_match_failed,
                                     base1_suffix = "pbdb",
                                     base2_suffix = "now",
                                     base1_col = "pbdb_taxon_name",
                                     base2_col = "now_accepted_name",
                                     min_dist = 4,
                                     max_dist = 4,
                                     delim = "_")
```

Evaluating correct matches

```{r}
fuzzy.2a.min4max4.eval <- fuzzy.2a.min4max4$min4max4_match_found %>%
  mutate(accepted_match = case_when(
    pbdb_taxon_name == "Lutra_palaeoleptonyx" & now_accepted_name == "Lutrogale_palaeoleptonyx" ~ TRUE,
    TRUE ~ FALSE
  ))
```

Adding correct matches to synonymy

```{r}
finalSynonymy.2 <- add_to_synonymy(finalSynonymy.2, fuzzy.2a.min4max4.eval)
```

```{r}
rm(fuzzy.2a.min3max3, 
   fuzzy.2a.min4max4)
```

As a final step, we can gather all pair evaluations done so far

```{r}
fuzzy.2a.eval <- bind_rows(fuzzy.2a.min1max1.eval,
                          fuzzy.2a.min2max2.eval,
                          fuzzy.2a.min3max3.eval,
                          fuzzy.2a.min4max4.eval)
```

```{r}
rm(fuzzy.2a.min1max1.eval,
                          fuzzy.2a.min2max2.eval,
                          fuzzy.2a.min3max3.eval,
                          fuzzy.2a.min4max4.eval)
```

##### Using the full list of names at once

```{r}
nowOccNames.unmatched.b <- anti_join(nowOccNames.unmatched, finalSynonymy.2)
```
String difference of 1 to 4

```{r}
fuzzy.2b.min1max4 <- harmonize_fuzzy_match(base1_dtf = pbdbTaxNames,
                                          base2_dtf = nowOccNames.unmatched.b,
                                          base1_suffix = "pbdb",
                                          base2_suffix = "now",
                                          base1_col = "pbdb_taxon_name",
                                          base2_col = "now_accepted_name",
                                          min_dist = 1,
                                          max_dist = 4,
                                          delim = "_")
```

Adding previous match evaluations to the new list

```{r}
fuzzy.2b.min1max4.eval <- left_join(fuzzy.2b.min1max4$min1max4_match_found,
                                   fuzzy.2a.eval)
```

Evaluating correct matches

```{r}
fuzzy.2b.min1max4.eval <- fuzzy.2b.min1max4.eval %>%
  mutate(accepted_match = case_when(
      pbdb_taxon_name == "Palaeogale_parvulus" & now_accepted_name == "Palaeogale_parvula" ~ TRUE,
      is.na(accepted_match) ~ FALSE,
      TRUE ~ accepted_match))
```

Adding correct matches to synonymy

```{r}
finalSynonymy.2 <- add_to_synonymy(finalSynonymy.2, fuzzy.2b.min1max4.eval)
```

Gathering all pair evaluations for this part

```{r}
fuzzy.2.eval <- bind_rows(fuzzy.2a.eval, fuzzy.2b.min1max4.eval)
```

```{r}
rm(fuzzy.2b.min1max4, 
   fuzzy.2b.min1max4.eval, 
   fuzzy.2a.eval)
```


#### Specific step

```{r}
finalSynonymy <- finalSynonymy.1 %>%
  mutate(pbdb_taxon_name = pbdb_accepted_name, 
         match_notes = paste0(match_notes, (" (accepted occ name)"))) %>%
  left_join(distinct(select(pbdbTaxNames, pbdb_taxon_name, pbdb_family))) %>%
  bind_rows(left_join(mutate(finalSynonymy.2, match_notes = paste0(match_notes, " (taxon name)")), pbdbTaxNames)) %>%
  distinct() %>%
  select(pbdb_family, 
         pbdb_accepted_name, 
         pbdb_taxon_name, 
         now_accepted_name, 
         string_distance, 
         match_notes)

evaluatedPairs <- fuzzy.1.eval %>%
  mutate(pbdb_taxon_name = pbdb_accepted_name, 
         match_notes = paste0(match_notes, (" (accepted occ name)"))) %>%
  left_join(distinct(select(pbdbTaxNames, pbdb_taxon_name, pbdb_family))) %>%
  bind_rows(left_join(mutate(fuzzy.2.eval, match_notes = paste0(match_notes, " (taxon name)")), pbdbTaxNames)) %>%
  distinct() %>%
  select(accepted_match,
         pbdb_family, 
         pbdb_accepted_name, 
         pbdb_taxon_name, 
         now_accepted_name, 
         string_distance, 
         match_notes)

rm(finalSynonymy.1, 
   finalSynonymy.2,
   fuzzy.1.eval,
   fuzzy.2.eval,
   nowOccNames.unmatched,
   nowOccNames.unmatched.b)
gc()

finalSynonymy %>%
  group_by(match_notes) %>%
  summarise(count = dplyr::n())

nowOccNames.unmatched <- anti_join(nowOccNames, finalSynonymy)
pbdbOccNames.unmatched <- anti_join(pbdbOccNames, finalSynonymy)
```

## Part 3 - Synonymy 2

```{r}
exact.3a <- harmonize_exact_match(base1_dtf = pbdbOccNames.unmatched,
                                 base2_dtf = mddTaxNames,
                                 base1_suffix = "pbdb",
                                 base2_suffix = "mdd",
                                 base1_col = "pbdb_accepted_name",
                                 base2_col = "MDD_original_combination")

exact.3a$exact_summary

finalSynonymy.3 <- exact.3a$exact_found

fuzzy.3aa.min1max1 <- harmonize_fuzzy_match(base1_dtf = exact.3a$pbdb_exact_failed,
                                          base2_dtf = exact.3a$mdd_exact_failed,
                                          base1_suffix = "pbdb",
                                          base2_suffix = "mdd",
                                          base1_col = "pbdb_accepted_name",
                                          base2_col = "MDD_original_combination",
                                          min_dist = 1,
                                          max_dist = 1,
                                          delim = "_")

fuzzy.3aa.min1max1.eval <- fuzzy.3aa.min1max1$min1max1_match_found %>%
  mutate(accepted_match = TRUE)

finalSynonymy.3 <- add_to_synonymy(finalSynonymy.3, fuzzy.3aa.min1max1.eval)

rm(exact.3a)

fuzzy.3aa.min2max2 <- harmonize_fuzzy_match(base1_dtf = fuzzy.3aa.min1max1$pbdb_min1max1_match_failed,
                                          base2_dtf = fuzzy.3aa.min1max1$mdd_min1max1_match_failed,
                                          base1_suffix = "pbdb",
                                          base2_suffix = "mdd",
                                          base1_col = "pbdb_accepted_name",
                                          base2_col = "MDD_original_combination",
                                          min_dist = 2,
                                          max_dist = 2,
                                          delim = "_")

fuzzy.3aa.min2max2.eval <- fuzzy.3aa.min2max2$min2max2_match_found %>%
  mutate(accepted_match = c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE))

finalSynonymy.3 <- add_to_synonymy(finalSynonymy.3, fuzzy.3aa.min2max2.eval)

fuzzy.3aa.min3max3 <- harmonize_fuzzy_match(base1_dtf = fuzzy.3aa.min2max2$pbdb_min2max2_match_failed,
                                          base2_dtf = fuzzy.3aa.min2max2$mdd_min2max2_match_failed,
                                          base1_suffix = "pbdb",
                                          base2_suffix = "mdd",
                                          base1_col = "pbdb_accepted_name",
                                          base2_col = "MDD_original_combination",
                                          min_dist = 3,
                                          max_dist = 3,
                                          delim = "_")

fuzzy.3aa.min3max3.eval <- fuzzy.3aa.min3max3$min3max3_match_found %>%
  mutate(accepted_match = FALSE)

finalSynonymy.3 <- add_to_synonymy(finalSynonymy.3, fuzzy.3aa.min3max3.eval)

fuzzy.3aa.min4max4 <- harmonize_fuzzy_match(base1_dtf = fuzzy.3aa.min3max3$pbdb_min3max3_match_failed,
                                          base2_dtf = fuzzy.3aa.min3max3$mdd_min3max3_match_failed,
                                          base1_suffix = "pbdb",
                                          base2_suffix = "mdd",
                                          base1_col = "pbdb_accepted_name",
                                          base2_col = "MDD_original_combination",
                                          min_dist = 4,
                                          max_dist = 4,
                                          delim = "_")

fuzzy.3aa.min4max4.eval <- fuzzy.3aa.min4max4$min4max4_match_found %>%
  mutate(accepted_match = case_when(
    pbdb_accepted_name == "Ailuropoda_fovealis" & MDD_original_combination == "Aeluropus_fovealis" ~ TRUE, 
    pbdb_accepted_name == "Pagophilus_groenlandica" & MDD_original_combination == "Pagophilus_grœnlandicus" ~ TRUE, 
    TRUE ~ FALSE))

finalSynonymy.3 <- add_to_synonymy(finalSynonymy.3, fuzzy.3aa.min4max4.eval)

fuzzy.3aa.eval <- bind_rows(fuzzy.3aa.min1max1.eval,
                          fuzzy.3aa.min2max2.eval,
                          fuzzy.3aa.min3max3.eval,
                          fuzzy.3aa.min4max4.eval)

rm(fuzzy.3aa.min1max1.eval,
                          fuzzy.3aa.min2max2.eval,
                          fuzzy.3aa.min3max3.eval,
                          fuzzy.3aa.min4max4.eval,
   fuzzy.1b.min1max4,
  fuzzy.3aa.min1max1,
  fuzzy.3aa.min2max2,
  fuzzy.3aa.min3max3,
  fuzzy.3aa.min4max4)
gc()

fuzzy.3ab.min1max4 <- harmonize_fuzzy_match(base1_dtf = pbdbOccNames.unmatched,
                                          base2_dtf = mddTaxNames,
                                          base1_suffix = "pbdb",
                                          base2_suffix = "mdd",
                                          base1_col = "pbdb_accepted_name",
                                          base2_col = "MDD_original_combination",
                                          min_dist = 1,
                                          max_dist = 4,
                                          delim = "_")

fuzzy.3ab.min1max4.eval <- left_join(fuzzy.3ab.min1max4$min1max4_match_found,
                                   fuzzy.3aa.eval)

fuzzy.3ab.min1max4.eval <- fuzzy.1b.min1max4.eval %>%
  mutate(accepted_match = case_when(
    match_notes == "different spelling on genus" & string_distance == 1 ~ TRUE,
    match_notes == "different spelling on genus" & string_distance == 2 ~ TRUE,
    TRUE ~ FALSE
  ))

finalSynonymy.3 <- add_to_synonymy(finalSynonymy.3, fuzzy.3ab.min1max4.eval)

```


```{r}
exact.3b <- harmonize_exact_match(base1_dtf = nowOccNames.unmatched,
                                 base2_dtf = mddTaxNames,
                                 base1_suffix = "now",
                                 base2_suffix = "mdd",
                                 base1_col = "now_accepted_name",
                                 base2_col = "MDD_original_combination")

exact.3b$exact_summary

finalSynonymy.3b <- exact.3b$exact_found

fuzzy.3ab.min1max1 <- harmonize_fuzzy_match(base1_dtf = exact.3a$now_exact_failed,
                                          base2_dtf = exact.3a$mdd_exact_failed,
                                          base1_suffix = "now",
                                          base2_suffix = "mdd",
                                          base1_col = "now_accepted_name",
                                          base2_col = "MDD_original_combination",
                                          min_dist = 1,
                                          max_dist = 1,
                                          delim = "_")

fuzzy.3ab.min1max1.eval <- fuzzy.3ab.min1max1$min1max1_match_found %>%
  mutate(accepted_match = TRUE)

finalSynonymy.3b <- add_to_synonymy(finalSynonymy.3b, fuzzy.3ab.min1max1.eval)

rm(exact.3b)

fuzzy.3ab.min2max2 <- harmonize_fuzzy_match(base1_dtf = fuzzy.3ab.min1max1$now_min1max1_match_failed,
                                          base2_dtf = fuzzy.3ab.min1max1$mdd_min1max1_match_failed,
                                          base1_suffix = "now",
                                          base2_suffix = "mdd",
                                          base1_col = "now_accepted_name",
                                          base2_col = "MDD_original_combination",
                                          min_dist = 2,
                                          max_dist = 2,
                                          delim = "_")

fuzzy.3ab.min2max2.eval <- fuzzy.3aa.min2max2$min2max2_match_found %>%
  mutate(accepted_match = FALSE)

finalSynonymy.3b <- add_to_synonymy(finalSynonymy.3, fuzzy.3ab.min2max2.eval)

fuzzy.3ab.min3max3 <- harmonize_fuzzy_match(base1_dtf = fuzzy.3ab.min2max2$now_min2max2_match_failed,
                                          base2_dtf = fuzzy.3ab.min2max2$mdd_min2max2_match_failed,
                                          base1_suffix = "now",
                                          base2_suffix = "mdd",
                                          base1_col = "now_accepted_name",
                                          base2_col = "MDD_original_combination",
                                          min_dist = 3,
                                          max_dist = 3,
                                          delim = "_")

fuzzy.3ab.min3max3.eval <- fuzzy.3ab.min3max3$min3max3_match_found %>%
  mutate(accepted_match = FALSE)

finalSynonymy.3b <- add_to_synonymy(finalSynonymy.3b, fuzzy.3ab.min3max3.eval)

fuzzy.3ab.min4max4 <- harmonize_fuzzy_match(base1_dtf = fuzzy.3ab.min3max3$now_min3max3_match_failed,
                                          base2_dtf = fuzzy.3ab.min3max3$mdd_min3max3_match_failed,
                                          base1_suffix = "now",
                                          base2_suffix = "mdd",
                                          base1_col = "now_accepted_name",
                                          base2_col = "MDD_original_combination",
                                          min_dist = 4,
                                          max_dist = 4,
                                          delim = "_")

fuzzy.3aa.min4max4.eval <- fuzzy.3aa.min4max4$min4max4_match_found %>%
  mutate(accepted_match = case_when(
    now_accepted_name == "Ailuropoda_fovealis" & MDD_original_combination == "Aeluropus_fovealis" ~ TRUE, 
    now_accepted_name == "Pagophilus_groenlandica" & MDD_original_combination == "Pagophilus_grœnlandicus" ~ TRUE, 
    TRUE ~ FALSE))

finalSynonymy.3 <- add_to_synonymy(finalSynonymy.3, fuzzy.3aa.min4max4.eval)

fuzzy.3aa.eval <- bind_rows(fuzzy.3aa.min1max1.eval,
                          fuzzy.3aa.min2max2.eval,
                          fuzzy.3aa.min3max3.eval,
                          fuzzy.3aa.min4max4.eval)

rm(fuzzy.3aa.min1max1.eval,
                          fuzzy.3aa.min2max2.eval,
                          fuzzy.3aa.min3max3.eval,
                          fuzzy.3aa.min4max4.eval,
   fuzzy.1b.min1max4,
  fuzzy.3aa.min1max1,
  fuzzy.3aa.min2max2,
  fuzzy.3aa.min3max3,
  fuzzy.3aa.min4max4)
gc()

fuzzy.3ab.min1max4 <- harmonize_fuzzy_match(base1_dtf = nowOccNames.unmatched,
                                          base2_dtf = mddTaxNames,
                                          base1_suffix = "now",
                                          base2_suffix = "mdd",
                                          base1_col = "now_accepted_name",
                                          base2_col = "MDD_original_combination",
                                          min_dist = 1,
                                          max_dist = 4,
                                          delim = "_")

fuzzy.3ab.min1max4.eval <- left_join(fuzzy.3ab.min1max4$min1max4_match_found,
                                   fuzzy.3aa.eval)

fuzzy.3ab.min1max4.eval <- fuzzy.1b.min1max4.eval %>%
  mutate(accepted_match = case_when(
    match_notes == "different spelling on genus" & string_distance == 1 ~ TRUE,
    match_notes == "different spelling on genus" & string_distance == 2 ~ TRUE,
    TRUE ~ FALSE
  ))

finalSynonymy.3 <- add_to_synonymy(finalSynonymy.3, fuzzy.3ab.min1max4.eval)

```

```{r}

now_occ <- now_occ %>%
  mutate(pbdb_accepted_name = str_replace_all(accepted_name, pattern = " ", replacement = "_"))

pbdb_occ_matched <- pbdb_occ %>%
  filter(pbdb_accepted_name %in% finalSynonymy$pbdb_accepted_name)


plot(pbdb_occ$lng, pbdb_occ$lat, ylim = c(-70, 80))
points(now_occ$LONG, now_occ$LAT, col = "red")


```

